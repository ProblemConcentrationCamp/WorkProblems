
对于前端来说,性能黄金法则:
只有10-20%的最终用户响应时间花在接受请求的html文档，剩下的时间花在HTML文档所引用的所有组件（img,script,css,flash）等的http请求上。

改善：减少组件（img,script,css,flash）的数量，由此减少http请求的数量。

http连接产生的开销：DNS域名解析 - TCP连接 - 发送请求 - 等待 -资源下载 - 浏览器解析
虽然DNS有缓存，仍不可避免的产生开销（缓存查找要时间，缓存有可能正好在更新）。

HTTP 采用 “请求 - 应答”模式，在非Keep - Alive 模式时，每次连接完成后立即断开连接（http是无状态的协议）。虽然http在1.1版本之后，默认开启Keep-Alive保持长连接，但是这个仍然是“短的长连接”。 例如：Keep-Alive：timeout=5，max=100，表示这个tcp通道保持5秒，最多接受100次请求就断开。
在某些情况下，我们甚至关闭Keep=Alive模式。因为保持连接需要消耗服务器的资源。当10000个用户发起请求，那么就会在一定时间保持10000个连接。

前端减少http请求的几种方式

1. 图片地图。允许在一个图片上关联多个URL，目标url的选择取决与用户单击图片的位置。避免了一张图片一个url，减少图片的请求。
2. CSS Sprites。css精灵。将多张图片合并，通过css的background-image和background-position来显示元素。减少图片的请求。
3. 合并脚本和样式表。将页面引用的脚本和样式表合并在一起，减少了http请求。目前不少插件都支持合并。比如vue的一些插件。
4.采用base64编码将图片直接嵌入到页面，而不是从外部请求后载入。

